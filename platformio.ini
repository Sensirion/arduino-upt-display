; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
default_envs = basicUsage

[common]
lib_deps_builtin =
    TFT_eSPI@^2.5.43
lib_deps_external = 
    Sensirion/Sensirion UPT Core@^0.9.4
basicusage_srcdir = ${PROJECT_DIR}/examples/basicUsage/
infopage_srcdir = ${PROJECT_DIR}/examples/infoPage/

[env]
platform = espressif32
build_flags =
    -std=gnu++17
build_unflags = 
    -std=gnu++11
framework = arduino
monitor_speed = 115200
extra_scripts = 
    pre:py_scripts/make_cpp_files.py
lib_deps =
    ${common.lib_deps_builtin}
    ${common.lib_deps_external}
lib_extra_dirs =
	${PROJECT_DIR}/src/*
check_tool = cppcheck, clangtidy
check_skip_packages = yes
check_flags=
    clangtidy: --style=file
    cppcheck: --suppress=unusedFunction --suppress=missingOverride --suppress=noExplicitConstructor
check_src_filters =
    +<${PROJECT_DIR}/src/>
    +<${PROJECT_DIR}/examples/>

[env:basicUsage]
build_src_filter = +<*> -<.git/> -<.svn/> +<${common.basicUsage_srcdir}>
board = lilygo-t-display-s3

[env:infoPage]
build_src_filter = +<*> -<.git/> -<.svn/> +<${common.infopage_srcdir}>
board = lilygo-t-display-s3

[env:develop]
build_src_filter = +<*> -<.git/> -<.svn/> +<${common.basicUsage_srcdir}>
board = lilygo-t-display-s3
monitor_filters = esp32_exception_decoder
build_type = debug
build_flags =
    -std=gnu++17
    -D UPTVISUALS_SHOW_GRID
    -DCORE_DEBUG_LEVEL=5              ; Available are (in increasing order):
                                                ; * ESP_LOG_NONE    (0)
                                                ; * ESP_LOG_ERROR   (1)
                                                ; * ESP_LOG_WARN    (2)
                                                ; * ESP_LOG_INFO    (3)
                                                ; * ESP_LOG_DEBUG   (4)
                                                ; * ESP_LOG_VERBOSE (5)
                                                ; NOTE: the esp_log library includes some other means to control the log level,
                                                ;       but I am unable to get them to work. It seems the only way to reliably 
                                                ;       control the log level is through this compiler flag, and to forgo any 
                                                ;       of the esp_log_level_set() methods.
